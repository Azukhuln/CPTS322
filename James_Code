#include <iostream>
#include <string>
#include <vector>
#include <fstream>

using namespace std;

class Assignment {
public:
    Assignment();
    int getGrade();
    int getMax();
    void editgrade();
    void editcomment();
    void editmax();
    string toCSV() const;

private:
    string name;
    int max;
    int grade;
    string comment;
};

Assignment::Assignment() {
    cout << "Name the assignment \n";
    getline(cin, name);

    cout << "Give the maximum point value \n";
    cin >> max;
    cin.ignore();

    cout << "Give the grade (in points) \n";
    cin >> grade;
    cin.ignore();

    cout << "Comment on the assignment \n";
    getline(cin, comment);
}

int Assignment::getGrade() {
    return(grade);
}

int Assignment::getMax() {
    return(max);
}

void Assignment::editgrade() {
    cout << "Enter new grade" << endl;
    cin >> grade;
}

void Assignment::editcomment() {
    cout << "Enter new comment" << endl;
    cin.ignore();
    getline(cin, comment);
}

void Assignment::editmax() {
    cout << "Enter new maximum grade" << endl;
    cin >> max;
}

string Assignment::toCSV() const {
    return(name + "," + to_string(max) + "," + to_string(grade) + "," + comment);
}

double coursegrade(vector<Assignment> x) {
    double grade = 0;
    double max = 0;
    for (int i = 0; i < x.size(); i++) {
        grade += x[i].getGrade();
        max += x[i].getMax();
    }
    if (max == 0) {
        return 0;
    }
    return((grade / max) * 100);
}

class Course {
public:
    Course(string newName, string newNumber, string newSemester, double newYear, double newGrade)
        : name(newName), number(newNumber), semester(newSemester), year(newYear), grade(newGrade) {}

    void addAssign() {
        Assignment a;
        assignments.push_back(a);
        computeGrade();
    }

    void computeGrade() {
        grade = coursegrade(assignments);
    }

    void appendAssignmentsToCSV(ofstream& file) const {
        for (const auto& assignment : assignments) {
            file << name << "," << number << "," << semester << "," << year << ","
                << assignment.toCSV() << "\n";
        }
    }

    void viewGrade() const {
        cout << "Course: " << name << " (" << number << ") - Semester: " << semester << " " << year << endl;
        cout << "Grade: " << grade << "%" << endl;
    }

private:
    string name;
    string number;
    string semester;
    double year;
    double grade;
    vector<Assignment> assignments;
};

class MainMenu {
public:
    void addCourse() {
        string courseName, courseNumber, courseSemester;
        double courseYear;
        cout << "Enter name of course" << endl;
        cin >> courseName;
        cout << "Enter course number" << endl;
        cin >> courseNumber;
        cout << "Enter course semester" << endl;
        cin >> courseSemester;
        cout << "Enter course year" << endl;
        cin >> courseYear;
        Course newCourse(courseName, courseNumber, courseSemester, courseYear, 0.0);
        courses.push_back(newCourse);
    }

    void addAssignmentToCourse() {
        if (courses.empty()) {
            cout << "No courses available. Please create a course first." << endl;
            return;
        }

        cout << "Select the course to add an assignment to:" << endl;
        for (size_t i = 0; i < courses.size(); ++i) {
            cout << i + 1 << ". ";
            courses[i].viewGrade();
        }

        int choice;
        cout << "Enter the course number: ";
        cin >> choice;

        if (choice < 1 || choice > courses.size()) {
            cout << "Invalid course selection." << endl;
            return;
        }

        courses[choice - 1].addAssign();
        cout << "Assignment added and grade updated." << endl;
    }

    void removeCourse() {
        string courseString, confirm;
        cout << "Enter course name or number to remove course" << endl;
        cin >> courseString;
        cout << "Are you sure you want to remove this course (Y/N)? " << endl;
        cin >> confirm;
    }

    void viewCourses() const {
        if (courses.empty()) {
            cout << "No courses available." << endl;
            return;
        }
        for (const auto& c : courses) {
            c.viewGrade();
        }
    }

    void saveAllCoursesToFiles() {
        ofstream file("CPTS322_storage.csv");
        if (!file.is_open()) {
            cerr << "Could not open CPTS322_storage.csv for writing!" << endl;
            return;
        }
        file << "Course Name,Course Number,Semester,Year,Assignment Name,Max,Grade,Comment\n";
        for (const auto& course : courses) {
            course.appendAssignmentsToCSV(file);
        }
        file.close();
    }

private:
    vector<Course> courses;
};

int main() {
    MainMenu menu;

    while (true) {
        int actionChoice = 0;
        int targetChoice = 0;

        cout << "CPTS322" << endl;
        cout << "Class Grade Calculator and Assignment Commenting Program\n\n" << endl;
        cout << "\nSelect an action:\n1. Create\n2. View\n3. Delete\n4. Exit" << endl;
        cin >> actionChoice;

        if (actionChoice == 4) {
            cout << "Saving data and exiting program." << endl;
            menu.saveAllCoursesToFiles();
            break;
        }

        cout << "Apply action to:\n1. Course\n2. Assignment" << endl;
        cin >> targetChoice;

        if (actionChoice == 1) {
            if (targetChoice == 1) {
                menu.addCourse();
            }
            else {
                menu.addAssignmentToCourse();
            }
        }
        else if (actionChoice == 2) {
            if (targetChoice == 1) {
                menu.viewCourses();
            }
            else {
                cout << "Assignment viewing not implemented yet." << endl;
            }
        }
        else if (actionChoice == 3) {
            if (targetChoice == 1) {
                menu.removeCourse();
            }
            else {
                cout << "Assignment deletion not implemented yet." << endl;
            }
        }
        else {
            cout << "Invalid action." << endl;
        }
    }
    return(0);
}
